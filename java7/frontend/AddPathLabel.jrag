
aspect AddPathLabel {

    protected static String CompilationUnit.JPF_PACKAGE = "gov.nasa.jpf.symbc";
    protected static String CompilationUnit.JPF_IMPORT = "Debug";


    /**
     * We don't want to add path labels more than once
     */
    syn boolean IfStmt.isPathLabelAdded() = pathLabelAdded;

    protected boolean IfStmt.pathLabelAdded = false;

    public void IfStmt.setPathLabelAdded(boolean  pathLabelAdded) {
        this.pathLabelAdded = pathLabelAdded;
    }

    protected static int Stmt.pathLabelDepth = 0;


    syn int Stmt.getPathLabelDepth() = pathLabelDepth;

    public void Stmt.setPathLabelDepth(int pathLabelDepth){
        this.pathLabelDepth = pathLabelDepth;
    }

    public String Stmt.getFreshLabel(){
        setPathLabelDepth(getPathLabelDepth()+1);
        return "_strongarm_taken_" + getPathLabelDepth();
    }

    public VarDeclStmt Stmt.getTag(String tagLabel){
        Opt<Expr> rhs = new Opt<Expr>();

        rhs.addChild(new BooleanLiteral("false"));

        VariableDeclarator d = new VariableDeclarator(tagLabel + getPathLabelDepth(), new List(), rhs);

        List l = new List();
        l.add(d);

        VarDeclStmt tag = new VarDeclStmt(new Modifiers(new List()), new PrimitiveTypeAccess("boolean"), l);

        return tag;
    }

    public void Stmt.wireBlock(Block b){

        String tagLabel = getFreshLabel();
        // we add two items

        // first, we add a local boolean variable which we will set
        // after symbolic execution to tell the post condition inference
        // tool if this branch was taken in the symbolic execution
        //
        // eg: boolean _strongarm_taken_<pathLabelDepth> = false;
        VarDeclStmt tag = getTag(tagLabel);
        //b.setStmt(tag,0);
        b.addStmt(tag);
        // second, we insert debugging statements of the form:
        //
        // Debug.printPC("\nPath Condition: [[<pathLabelDepth>]]");

        List<Stmt> stmts = b.getStmtList();

        // swap
        int last = stmts.numChildren()-1;

        Stmt s0 = stmts.getChild(0);
        Stmt sn = stmts.getChild(last);

        stmts.setChild(sn,0);
        stmts.setChild(s0, last);

    }



    public boolean CompilationUnit.hasJPFImports(){

        List<ImportDecl> list = getImportDeclList();

        for(ImportDecl d : list){
            if(d.getAccess().packageName().equalsIgnoreCase(JPF_PACKAGE)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Each top level
     */

    rewrite IfStmt {
        when (isPathLabelAdded()==false)
        to IfStmt {
            // prevent from readding the label
            setPathLabelAdded(true);

            wireBlock((Block)getThen());

            if(hasElse()){
                wireBlock((Block)getElse());
            }


            return this;
        }
    }

    rewrite CompilationUnit {
        when (hasJPFImports()==false)

        to CompilationUnit {

            SingleTypeImportDecl decl = new SingleTypeImportDecl();
            decl.setAccess(new TypeAccess(JPF_PACKAGE, JPF_IMPORT));
            addImportDecl(decl);

            return this;
        }
    }


}
