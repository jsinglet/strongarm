buildscript {
	repositories.mavenCentral()
	dependencies {
		classpath group: 'org.jastadd', name: 'jastaddgradle', version: '1.9.11'
	}
}

repositories {
	mavenCentral()
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jastadd'
apply plugin: 'eclipse'

/** Helper function to run a command. Returns the command output if the command succeeded. */
def tryCommand(List command, boolean failOnError = false) {
	def out = new StringBuilder()
	def err = new StringBuilder()
	def proc = command.execute()
	proc.waitForProcessOutput(out, err)
	if (proc.exitValue()) {
		def msg = "failed to run '${command[0]}' command (args: ${command.tail()})\n$err$out"
		if (failOnError) {
			throw new GradleException(msg)
		} else {
			print 'Warning: '
			println msg
		}
		""
	} else {
		if (err) println "${err}"
		out.toString()
	}
}

/** Helper function to retrieve the current version string. */
def getVersion() {
	if (hasProperty('newVersion')) {
		// A new version string should be saved.
		Properties version = new Properties()
		version['version'] = newVersion
		version.store(file('src/res/Version.properties').newWriter(), null)
		return newVersion
	} else {
		def output = tryCommand(['git', 'describe'])
		if (output) {
			// Use Git describe output.
			output.readLines()[0]
		} else {
			// Git command failed. Read the previous version string instead.
			Properties version = new Properties()
			version.load(new FileInputStream(file('src/res/Version.properties')))
			version['version']
		}
	}
}

jastadd {
	modules 'jastadd_modules'

	// Target module:
	// Call Gradle with -Pjastadd.module="..." to select module to build.
	// Remember to run the 'clean' task if a new target module is specified!
	module = project.properties['jastadd.module'] ?: "strongarm"

	astPackage = "org.extendj.ast"
	genDir = "src/gen"
	buildInfoDir = "src/gen-res"
	parser.name = "JavaParser"
	parser.genDir = "src/gen/org/extendj/parser"
}

project.version = getVersion()

println "Building ${module.name} version ${version}"

// Add main classes depending on target module.
if (jastadd.module.name.endsWith('backend')) {
	// Add the backend main classes.
	mainClassName = 'org.extendj.JavaCompiler'
	sourceSets {
		main.java.srcDir 'src/backend-main'
		main.java.srcDir 'src/frontend-main' // include JastAddJVersion
	}
} else {
	mainClassName = 'org.extendj.JavaChecker'
	sourceSets {
		main.java.srcDir 'src/frontend-main'
	}
}

jar.baseName = 'strongarm'
jar.manifest.attributes 'Main-Class': 'leavenslab.LLJavaPrettyPrinter' //mainClassName
jar.destinationDir = projectDir

// Set javac -source and -target flags.
sourceCompatibility = '1.6'
targetCompatibility = '1.6'

dependencies {
	// Ant is needed to build the ExtendJ Ant task.
	compile group: 'org.apache.ant', name: 'ant', version: '1.9.4'
}

sourceSets {
	main {
		resources {
			srcDir jastadd.buildInfoDir
		}
	}
}

processResources.dependsOn 'updateVersionString'

task updateVersionString {
	outputs.upToDateWhen {
		def props = new Properties()
		def output = file('src/gen-res/Version.properties')
		if (output.isFile()) {
			output.withInputStream { stream -> props.load(stream) }
		}
		props['version'] == project.version
	}

	doLast {
		file('src/gen-res').mkdirs()
		def versionFile = file('src/gen-res/Version.properties')
		ant.propertyfile(file: versionFile) {
			entry(key: 'version', value: project.version)
		}
	}
}

// Fix the .classpath file for the generated Eclipse project.
eclipse.classpath.file {
	beforeMerged { classpath ->
		classpath.entries << new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/frontend', null)
		classpath.entries << new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/backend', null)
		if (jastadd.module.name.contains('java8'))
			classpath.entries << new org.gradle.plugins.ide.eclipse.model.SourceFolder('java8/src', null)
	}
	withXml { node ->
		def gen = node.asNode().find { it.@kind == 'src' && it.@path == 'src/gen/java' }
		if (gen?.children()?.isEmpty())
			gen.appendNode('attributes').appendNode('attribute', [ name: 'ignore_optional_problems', value: 'true' ])
	}
}

